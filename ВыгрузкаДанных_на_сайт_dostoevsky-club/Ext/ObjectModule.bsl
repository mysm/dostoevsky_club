Процедура ЗаписатьВЖурнал(СтрокаЖурнала, Настройки)
	
	Если Настройки.Свойство("ВестиЖурналВыгрузки") Тогда
		Если НЕ Настройки.ВестиЖурналВыгрузки Тогда
			Возврат;	
		КонецЕсли; 
	Иначе
		Возврат;			
	КонецЕсли; 
	
	Если Настройки.Свойство("КаталогЖурналаВыгрузки") Тогда
		КаталогЖурналаВыгрузки = Настройки.КаталогЖурналаВыгрузки;
	Иначе
		КаталогЖурналаВыгрузки = "";
	КонецЕсли; 
	
	Если Настройки.Свойство("МаксимальныйРазмерЖурнала") Тогда
		МаксимальныйРазмерЖурнала = Настройки.МаксимальныйРазмерЖурнала * 1024;
	Иначе
		МаксимальныйРазмерЖурнала = 0;
	КонецЕсли; 
	
	ИмяФайлаЖурнала = "upload_log.txt";
	
	ПолноеИмяФайлаЖурнала = СтрШаблон("%1%2",
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогЖурналаВыгрузки),
		ИмяФайлаЖурнала);
			
	ДобавлятьВЖурнал = Истина;	
	Если МаксимальныйРазмерЖурнала > 0 Тогда
		Файл = Новый Файл(ПолноеИмяФайлаЖурнала);
		Если Файл.Существует() Тогда
			Если Файл.Размер() > МаксимальныйРазмерЖурнала Тогда
				ДобавлятьВЖурнал = Ложь;	
			КонецЕсли; 	
		КонецЕсли; 
	КонецЕсли; 	
		
	ТекстовыйДокумент = Новый ЗаписьТекста;
	ТекстовыйДокумент.Открыть(ПолноеИмяФайлаЖурнала, КодировкаТекста.UTF8, Символы.ВК + Символы.ПС, ДобавлятьВЖурнал);
	ТекстовыйДокумент.ЗаписатьСтроку(СтрШаблон("%1: %2", Формат(ТекущаяДатаСеанса(),"ДЛФ=DT"), СтрокаЖурнала));
	ТекстовыйДокумент.Закрыть();

КонецПроцедуры	

Функция ОтправитьPOSTЗапрос(АдресСервера, ИмяМетода, Заголовки, ТелоЗапроса)

	СтруктураURL = ПолучениеФайловИзИнтернетаКлиентСервер.РазделитьURL(АдресСервера);
			
	HTTPЗапрос = Новый HTTPЗапрос(ИмяМетода, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
	
	ЗащищенноеСоединение = Неопределено;
	Протокол = СтруктураURL.Протокол;
			
	Если (Протокол = "https" Или Протокол = "ftps") И ЗащищенноеСоединение = Неопределено Тогда
		ЗащищенноеСоединение = Истина;
	КонецЕсли;
		
	Если ЗащищенноеСоединение = Истина Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	ИначеЕсли ЗащищенноеСоединение = Ложь Тогда
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
		
	ПроксиСервер = Новый ИнтернетПрокси(Истина);	 
			
	HTTPСоединение = Новый HTTPСоединение(СтруктураURL.ИмяСервера,,,,ПроксиСервер,180,ЗащищенноеСоединение); 
	HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ОтветСервера =  HTTPОтвет.ПолучитьТелоКакСтроку();	
	Если HTTPОтвет.КодСостояния <> 200 Тогда			
		ВызватьИсключение СтрШаблон("Ошибка выполнения запроса. Код состояния сервера %1, тело ответа %2",
							HTTPОтвет.КодСостояния, ОтветСервера);	
	КонецЕсли;	
			
    ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСервера);
	ДанныеСервераJSON = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();

	Возврат ДанныеСервераJSON;
	
КонецФункции // ОтправитьPOSTЗапрос()

Функция ДанныеВJSON(Данные)

	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	ЗаписьJSON.ПроверятьСтруктуру = Истина;
		
	ЗаписатьJSON(ЗаписьJSON, Данные);
	СтрокаJSON = ЗаписьJSON.Закрыть();

	Возврат СтрокаJSON;

КонецФункции // ДанныеВJSON()
 
Функция ОтправитьДанныеНаСайт(Настройки, ДанныеДляОтправки)
	
	МетодыСервера = Новый Структура;
	МетодыСервера.Вставить("ПолучитьТокенАвторизации","/api/v1/auth/token/");
	МетодыСервера.Вставить("ОбновитьТокенАвторизации","/api/v1/auth/token-refresh/");
	МетодыСервера.Вставить("ЗагрузитьДанныеОТоварах","/api/v1/exchange/upload-catalogue/");
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-type", "application/json; charset=UTF-8");
		
	Попытка
		
	    ПараметрыАвторизации = Настройки;
		АдресСервера = ПараметрыАвторизации.АдресРесурса;
		Результат = СтруктураСообщенияОбОшибке();
		
		// получить токен
		ДанныеАвторизации = Новый Структура;
		ДанныеАвторизации.Вставить("email",ПараметрыАвторизации.Логин);
		ДанныеАвторизации.Вставить("password",ПараметрыАвторизации.Пароль);
		ТелоЗапросаJSON = ДанныеВJSON(ДанныеАвторизации);
		ДанныеОтСервера = ОтправитьPOSTЗапрос(АдресСервера, МетодыСервера.ПолучитьТокенАвторизации, 
					Заголовки, ТелоЗапросаJSON);
					
		Заголовки.Вставить("Authorization",СтрШаблон("jwt %1",ДанныеОтСервера.access));
		
		// отправить данные
		ДанныеОтСервера = ОтправитьPOSTЗапрос(АдресСервера, МетодыСервера.ЗагрузитьДанныеОТоварах, 
					Заголовки, ДанныеДляОтправки);
		
		
		// прочитать ответ                                                             
		Результат.Успешно = Истина;
		Результат.ОписаниеОшибки = "";
		Результат.Вставить("Данные",ДанныеОтСервера);
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru = 'Ошибка выгрузки данных на сайт: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения,КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Результат.Успешно = Ложь;
		Результат.ОписаниеОшибки = ТекстСообщения;	
	КонецПопытки;

	Возврат Результат;
	
КонецФункции

Функция Выгрузить() Экспорт
	
	// получить прараметры соединения
	Результат = ЗагрузитьНастройки();
	Если Не Результат.Успешно Тогда
		Возврат Результат;	
	КонецЕсли; 

	Попытка
		
		Настройки = Результат.Данные;
		Если Настройки.Свойство("ПоследнийВыгруженныйОбъект") Тогда
			ПоследнийВыгруженныйОбъект = Настройки.ПоследнийВыгруженныйОбъект;
		Иначе
			ПоследнийВыгруженныйОбъект = Справочники.Номенклатура.ПустаяСсылка();
			Настройки.Вставить("ПоследнийВыгруженныйОбъект",ПоследнийВыгруженныйОбъект);
		КонецЕсли; 
		
		Если Настройки.Свойство("РазмерПакета") Тогда
			РазмерПакета = Настройки.РазмерПакета;
		Иначе
			РазмерПакета = 0;
			Настройки.Вставить("РазмерПакета",РазмерПакета);			
		КонецЕсли;
		
		Если Настройки.Свойство("ДатаПоследнейВыгрузки") Тогда
			ДатаПоследнейВыгрузки = Настройки.ДатаПоследнейВыгрузки;
		Иначе
			ДатаПоследнейВыгрузки = '00010101';
			Настройки.Вставить("ДатаПоследнейВыгрузки",ДатаПоследнейВыгрузки);						
		КонецЕсли; 
		
		Если Настройки.Свойство("НеОтправлятьНаСайт") Тогда
			НеОтправлятьНаСайт = Настройки.НеОтправлятьНаСайт;
		Иначе
			НеОтправлятьНаСайт = Ложь;
			Настройки.Вставить("НеОтправлятьНаСайт",НеОтправлятьНаСайт);						
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,Настройки);
		
		Если Не ЗначениеЗаполнено(ПоследнийВыгруженныйОбъект) Тогда
			Если ДатаПоследнейВыгрузки >= НачалоДня(ТекущаяДатаСеанса()) Тогда
				// Выгрузка сегодня уже была
				Результат = СтруктураСообщенияОбОшибке();
				Результат.Успешно = Истина;
				Возврат Результат;
			КонецЕсли; 	
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НоменклатураПрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
		               |	НоменклатураПрисоединенныеФайлы.Наименование КАК Наименование,
		               |	НоменклатураПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		               |	НоменклатураПрисоединенныеФайлы.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
		               |	НоменклатураПрисоединенныеФайлы.Расширение КАК Расширение
		               |ПОМЕСТИТЬ вт_ПрисоединенныеФайлы
		               |ИЗ
		               |	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
		               |ГДЕ
		               |	(НоменклатураПрисоединенныеФайлы.ВладелецФайла, НоменклатураПрисоединенныеФайлы.ДатаМодификацииУниверсальная) В
		               |			(ВЫБРАТЬ
		               |				НоменклатураПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		               |				МАКСИМУМ(НоменклатураПрисоединенныеФайлы.ДатаМодификацииУниверсальная) КАК ДатаМодификацииУниверсальная
		               |			ИЗ
		               |				Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
		               |			СГРУППИРОВАТЬ ПО
		               |				НоменклатураПрисоединенныеФайлы.ВладелецФайла)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	НоменклатураСпр.Ссылка КАК Guid,
		               |	НоменклатураСпр.Наименование КАК Наименование,
		               |	НоменклатураСпр.Артикул КАК Артикул,
		               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
		               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних1.Цена, 0) КАК ЦенаСоСкидкой,
		               |	НоменклатураСпр.Производитель КАК Производитель,
		               |	НоменклатураСпр.Описание КАК Описание,
		               |	ЕСТЬNULL(Значение1.Значение.Наименование, &ПредставлениеNULL) КАК ISBN,
		               |	ЕСТЬNULL(Значение2.Значение.Ссылка, &ПредставлениеNULL) КАК НазваниеСерииПродукции,
		               |	ЕСТЬNULL(Значение3.Значение, &ПредставлениеNULL) КАК Авторы,
		               |	ЕСТЬNULL(Значение4.Значение.Наименование, &ПредставлениеNULL) КАК НаименованиеДляСайта,
		               |	ЕСТЬNULL(Значение5.Значение, &ПредставлениеNULL) КАК ТипТовара,
		               |	ЕСТЬNULL(Значение6.Значение, &ПредставлениеNULL) КАК КоличествоСтраниц,
		               |	ЕСТЬNULL(Значение7.Значение, &ПредставлениеNULL) КАК Измерение1,
		               |	ЕСТЬNULL(Значение8.Значение, &ПредставлениеNULL) КАК Измерение2,
		               |	ЕСТЬNULL(Значение9.Значение, &ПредставлениеNULL) КАК Измерение3,
		               |	ЕСТЬNULL(Значение10.Значение, &ПредставлениеNULL) КАК Вес,
		               |	ЕСТЬNULL(Значение11.Значение, &ПредставлениеNULL) КАК ГодВыпуска,
		               |	ЕСТЬNULL(Значение12.Значение.Ссылка, &ПредставлениеNULL) КАК СтранаПроизводитель,
		               |	ЕСТЬNULL(Значение13.Значение, &ПредставлениеNULL) КАК Жанр,
		               |	ЕСТЬNULL(Значение14.Значение, &ПредставлениеNULL) КАК ВозрастноеОграничение,
		               |	ЕСТЬNULL(Значение15.Значение.Ссылка, &ПредставлениеNULL) КАК ЯзыкИздания,
		               |	ЕСТЬNULL(Значение16.Значение, &ПредставлениеNULL) КАК ИмяПереводчика,
		               |	ЕСТЬNULL(Значение17.Значение, &ПредставлениеNULL) КАК ИмяИллюстратора,
		               |	ЕСТЬNULL(Значение18.Значение.Ссылка, &ПредставлениеNULL) КАК ТипПереплета,
		               |	ЕСТЬNULL(Значение19.Значение, ЛОЖЬ) КАК is_active,
		               |	ЕСТЬNULL(Значение20.Значение, ЛОЖЬ) КАК is_available,
		               |	ЕСТЬNULL(Значение21.Значение, &ПредставлениеNULL) КАК Издательство,
		               |	НоменклатураСпр.НаименованиеПолное КАК НаименованиеПолное,
		               |	НоменклатураПрисоединенныеФайлы.Расширение КАК Изображение
		               |ИЗ
		               |	Справочник.Номенклатура КАК НоменклатураСпр
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		               |		ПО НоменклатураСпр.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ЦенаСоСкидкой) КАК ЦеныНоменклатурыСрезПоследних1
		               |		ПО НоменклатураСпр.Ссылка = ЦеныНоменклатурыСрезПоследних1.Номенклатура
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Значение1
		               |		ПО (Значение1.Свойство = &Свойство1)
		               |			И НоменклатураСпр.Ссылка = Значение1.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Значение2
		               |		ПО (Значение2.Свойство = &Свойство2)
		               |			И НоменклатураСпр.Ссылка = Значение2.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Значение3
		               |		ПО (Значение3.Свойство = &Свойство3)
		               |			И НоменклатураСпр.Ссылка = Значение3.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Значение4
		               |		ПО (Значение4.Свойство = &Свойство4)
		               |			И НоменклатураСпр.Ссылка = Значение4.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Значение5
		               |		ПО (Значение5.Свойство = &Свойство5)
		               |			И НоменклатураСпр.Ссылка = Значение5.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Значение6
		               |		ПО (Значение6.Свойство = &Свойство6)
		               |			И НоменклатураСпр.Ссылка = Значение6.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Значение7
		               |		ПО (Значение7.Свойство = &Свойство7)
		               |			И НоменклатураСпр.Ссылка = Значение7.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Значение8
		               |		ПО (Значение8.Свойство = &Свойство8)
		               |			И НоменклатураСпр.Ссылка = Значение8.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Значение9
		               |		ПО (Значение9.Свойство = &Свойство9)
		               |			И НоменклатураСпр.Ссылка = Значение9.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Значение10
		               |		ПО (Значение10.Свойство = &Свойство10)
		               |			И НоменклатураСпр.Ссылка = Значение10.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Значение11
		               |		ПО (Значение11.Свойство = &Свойство11)
		               |			И НоменклатураСпр.Ссылка = Значение11.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Значение12
		               |		ПО (Значение12.Свойство = &Свойство12)
		               |			И НоменклатураСпр.Ссылка = Значение12.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Значение13
		               |		ПО (Значение13.Свойство = &Свойство13)
		               |			И НоменклатураСпр.Ссылка = Значение13.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Значение14
		               |		ПО (Значение14.Свойство = &Свойство14)
		               |			И НоменклатураСпр.Ссылка = Значение14.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Значение15
		               |		ПО (Значение15.Свойство = &Свойство15)
		               |			И НоменклатураСпр.Ссылка = Значение15.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Значение16
		               |		ПО (Значение16.Свойство = &Свойство16)
		               |			И НоменклатураСпр.Ссылка = Значение16.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Значение17
		               |		ПО (Значение17.Свойство = &Свойство17)
		               |			И НоменклатураСпр.Ссылка = Значение17.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Значение18
		               |		ПО (Значение18.Свойство = &Свойство18)
		               |			И НоменклатураСпр.Ссылка = Значение18.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Значение19
		               |		ПО (Значение19.Свойство = &Свойство19)
		               |			И НоменклатураСпр.Ссылка = Значение19.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Значение20
		               |		ПО (Значение20.Свойство = &Свойство20)
		               |			И НоменклатураСпр.Ссылка = Значение20.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Значение21
		               |		ПО (Значение21.Свойство = &Свойство21)
		               |			И НоменклатураСпр.Ссылка = Значение21.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ вт_ПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
		               |		ПО НоменклатураСпр.Ссылка = НоменклатураПрисоединенныеФайлы.ВладелецФайла
		               |ГДЕ
		               |	НоменклатураПрисоединенныеФайлы.Ссылка <> ЗНАЧЕНИЕ(Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка)
		               |	И НЕ Значение1.Значение = """"
		               |	И НЕ Значение5.Значение = """"
		               |	И НЕ Значение10.Значение = """"
		               |	И НоменклатураСпр.Ссылка > &ПоследнийВыгруженныйОбъект
		               |	И НЕ НоменклатураСпр.ПометкаУдаления
		               |	И ИСТИНА
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Guid";
		
		Если РазмерПакета > 0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВЫБРАТЬ РАЗЛИЧНЫЕ",СТрШаблон("ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ %1 ",Формат(РазмерПакета,"ЧДЦ=0; ЧГ=0")));
		КонецЕсли;	
		
		Номенклатура = ЭтотОбъект.Родитель;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			ТекстЗамены  = "И ИСТИНА";
			Если Номенклатура.ЭтоГруппа Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстЗамены, "И НоменклатураСпр.Ссылка В ИЕРАРХИИ (&Номенклатура)");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстЗамены,"И НоменклатураСпр.Ссылка = &Номенклатура");
				ПоследнийВыгруженныйОбъект = Справочники.Номенклатура.ПустаяСсылка();
			КонецЕсли; 	
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		КонецЕсли; 
	
		Запрос.УстановитьПараметр("ПредставлениеNULL","");	
		Запрос.УстановитьПараметр("ПоследнийВыгруженныйОбъект", ПоследнийВыгруженныйОбъект);
		Запрос.УстановитьПараметр("ВидЦены", ЭтотОбъект.ВидЦен);
		Запрос.УстановитьПараметр("ЦенаСоСкидкой", ЭтотОбъект.ЦенаСоСкидкой);
		Запрос.УстановитьПараметр("Свойство1", ЭтотОбъект.Свойство1);
		Запрос.УстановитьПараметр("Свойство2", ЭтотОбъект.Свойство2);
		Запрос.УстановитьПараметр("Свойство3", ЭтотОбъект.Свойство3);
		Запрос.УстановитьПараметр("Свойство4", ЭтотОбъект.Свойство4);
		Запрос.УстановитьПараметр("Свойство5", ЭтотОбъект.Свойство5);
		Запрос.УстановитьПараметр("Свойство6", ЭтотОбъект.Свойство6);
		Запрос.УстановитьПараметр("Свойство7", ЭтотОбъект.Свойство7);
		Запрос.УстановитьПараметр("Свойство8", ЭтотОбъект.Свойство8);
		Запрос.УстановитьПараметр("Свойство9", ЭтотОбъект.Свойство9);
		Запрос.УстановитьПараметр("Свойство10", ЭтотОбъект.Свойство10);
		Запрос.УстановитьПараметр("Свойство11", ЭтотОбъект.Свойство11);
		Запрос.УстановитьПараметр("Свойство12", ЭтотОбъект.Свойство12);
		Запрос.УстановитьПараметр("Свойство13", ЭтотОбъект.Свойство13);
		Запрос.УстановитьПараметр("Свойство14", ЭтотОбъект.Свойство14);
		Запрос.УстановитьПараметр("Свойство15", ЭтотОбъект.Свойство15);
		Запрос.УстановитьПараметр("Свойство16", ЭтотОбъект.Свойство16);
		Запрос.УстановитьПараметр("Свойство17", ЭтотОбъект.Свойство17);
		Запрос.УстановитьПараметр("Свойство18", ЭтотОбъект.Свойство18);
		Запрос.УстановитьПараметр("Свойство19", ЭтотОбъект.Свойство19);
		Запрос.УстановитьПараметр("Свойство20", ЭтотОбъект.Свойство20);
		Запрос.УстановитьПараметр("Свойство21", ЭтотОбъект.Свойство21);
		
		
		РезультатЗапроса = Запрос.Выполнить();	  
		
		Если РезультатЗапроса.Пустой() Тогда
			
			// выгружен последний пакет
			ПоследнийВыгруженныйОбъект = Справочники.Номенклатура.ПустаяСсылка();
			ДатаПоследнейВыгрузки = НачалоДня(ТекущаяДатаСеанса());
			
			Результат = СтруктураСообщенияОбОшибке();
			Результат.Успешно = Истина;
			
		Иначе
			
			Выборка = РезультатЗапроса.Выбрать();
			МассивПозиций = Новый Массив;
			
			КаталогКартинок = КаталогКартинок(); 	
			Пока Выборка.Следующий() Цикл
				
				ПоследнийВыгруженныйОбъект = Выборка.Guid;
				
				ПолноеИмяФайлаКартинки = СтрШаблон("%1%2.%3",
					КаталогКартинок,
					ИмяФайлаКартинки(Выборка.Guid,Выборка.НаименованиеПолное),
					Выборка.Изображение);
				ДанныеПозиции = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Выборка);
				ДанныеПозиции.Вставить("Изображение", ПолноеИмяФайлаКартинки);
				СерилизоватьДанные(ДанныеПозиции);
				МассивПозиций.Добавить(ДанныеПозиции);
			
			КонецЦикла; 
			
			// выгружаемые данные
			СтруктураВыгрузки = Новый Структура;
			
			ВыгружаемыеСправочники = Новый Структура;
			ВыгружаемыеСправочники.Вставить("producing_country",	ЭтотОбъект.Свойство12);		// страна-производитель
			ВыгружаемыеСправочники.Вставить("genre",				ЭтотОбъект.Свойство13);		// жанр
			ВыгружаемыеСправочники.Вставить("original_language",	ЭтотОбъект.Свойство15); 	// язык-издания
			ВыгружаемыеСправочники.Вставить("authors",				ЭтотОбъект.Свойство3); 		// авторы
			ВыгружаемыеСправочники.Вставить("binding_types",		ЭтотОбъект.Свойство18); 	// тип переплета
			ВыгружаемыеСправочники.Вставить("publishing_house",		ЭтотОбъект.Свойство21); 	// издательство
			ВыгружаемыеСправочники.Вставить("manufacturer",			Метаданные.Справочники.Производители.Имя);		// Производитель

			//ВыгружаемыеСправочники.Вставить("series",				ЭтотОбъект.Свойство21); 	// название серии			
			
			// выгрузка справочников
			Для каждого ВыгружаемыйСправочник Из ВыгружаемыеСправочники Цикл
				МассивЭлементов = ДанныеСправочника(ВыгружаемыйСправочник.Значение);
				СтруктураВыгрузки.Вставить(ВыгружаемыйСправочник.Ключ, МассивЭлементов);				
			КонецЦикла; 
			
			// выгрузка книг 
			СтруктураВыгрузки.Вставить("books", МассивПозиций);
			КоличествоКВыгрузке = МассивПозиций.Количество();
			
			ЗаписьJSON = Новый ЗаписьJSON();
			ЗаписьJSON.УстановитьСтроку();
			ЗаписьJSON.ПроверятьСтруктуру = Ложь;	
			
			ЗаписатьJSON(ЗаписьJSON, СтруктураВыгрузки);
			СтрокаJSON = ЗаписьJSON.Закрыть();
			
			ЗаписатьВЖурнал(СтрокаJSON, Настройки);
			
			Если НеОтправлятьНаСайт = Ложь Тогда
				Результат = ОтправитьДанныеНаСайт(Настройки, СтрокаJSON);			
				
				Если Результат.Успешно Тогда
					ЗаписатьВЖурнал(СтрШаблон("Ответ сервера: %1", ДанныеВJSON(Результат.Данные)), Настройки);
				Иначе
					ЗаписатьВЖурнал(СтрШаблон("ОШИБКА ЗАПРОСА: %1",Результат.ОписаниеОшибки), Настройки);
				КонецЕсли; 
				
			КонецЕсли; 			
			
			Результат.Вставить("Данные",Новый Структура("ВыгруженоОбъектов",КоличествоКВыгрузке));
			
			Результат.Успешно = Истина;
			
		КонецЕсли; 
		
		Если Результат.Успешно Тогда
			Настройки.ПоследнийВыгруженныйОбъект = ПоследнийВыгруженныйОбъект;
			Настройки.ДатаПоследнейВыгрузки = ДатаПоследнейВыгрузки;
			СохранитьНастройки(Настройки);
		КонецЕсли; 
		
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru = 'Ошибка получения данных для выгрузки на сайт: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения,КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Результат.Успешно = Ложь;
		Результат.ОписаниеОшибки = ТекстСообщения;	
	КонецПопытки;
	
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеСправочника(НаименованиеСправочника)
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Если ТипЗнч(НаименованиеСправочника) = Тип("Строка") Тогда
		// Это справочник
		ШаблонРодитель = ""; 
		Упорядочивание = "Ссылка";
		МетаданныеСправочника = Метаданные.Справочники[НаименованиеСправочника];
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Родитель",МетаданныеСправочника) Тогда
			ШаблонРодитель = СтрШаблон("%1.Родитель КАК РодительНаименование,",НаименованиеСправочника);	
			Упорядочивание = "Родитель";
		КонецЕсли; 
		ШаблонЗапроса = "ВЫБРАТЬ
		|	%1.Ссылка КАК Guid,
		|	%2
		|	%1.Наименование КАК Наименование
		|ИЗ
		|	Справочник.%1 КАК %1
		|
		|УПОРЯДОЧИТЬ ПО
		|	%3";
		Запрос.Текст = СтрШаблон(ШаблонЗапроса,НаименованиеСправочника,ШаблонРодитель,Упорядочивание);
		
	ИначеЕсли ТипЗнч(НаименованиеСправочника) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда 	
		// Это список доп реквизитов.
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗначенияСвойствОбъектов.Ссылка КАК Guid,
		               |	ЗначенияСвойствОбъектов.Наименование КАК Наименование,
		               |	ЗначенияСвойствОбъектов.Родитель КАК РодительНаименование,
		               |	ЗначенияСвойствОбъектов.Родитель КАК РодительGuid
		               |ИЗ
		               |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		               |ГДЕ
		               |	ЗначенияСвойствОбъектов.Владелец = &Владелец
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ЗначенияСвойствОбъектов.Ссылка";
		Запрос.УстановитьПараметр("Владелец", НаименованиеСправочника);	
	Иначе
		Возврат Результат;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл						
			ДанныеПозиции = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Выборка);
			СерилизоватьДанные(ДанныеПозиции);
			Результат.Добавить(ДанныеПозиции);			
		КонецЦикла; 		
		
	КонецЕсли; 
	
	
	Возврат Результат;
	
КонецФункции
 
Функция ВыгрузитьСувениры() Экспорт
	
	// получить прараметры соединения
	Результат = ЗагрузитьНастройки();
	Если Не Результат.Успешно Тогда
		Возврат Результат;	
	КонецЕсли; 

	Попытка
		
		Настройки = Результат.Данные;
		Если Настройки.Свойство("ПоследнийВыгруженныйОбъектСувениры") Тогда
			ПоследнийВыгруженныйОбъектСувениры = Настройки.ПоследнийВыгруженныйОбъектСувениры;
		Иначе
			ПоследнийВыгруженныйОбъектСувениры = Справочники.Номенклатура.ПустаяСсылка();
			Настройки.Вставить("ПоследнийВыгруженныйОбъектСувениры",ПоследнийВыгруженныйОбъектСувениры);
		КонецЕсли; 
		
		Если Настройки.Свойство("РазмерПакета") Тогда
			РазмерПакета = Настройки.РазмерПакета;
		Иначе
			РазмерПакета = 0;
			Настройки.Вставить("РазмерПакета",РазмерПакета);			
		КонецЕсли;
		
		Если Настройки.Свойство("ДатаПоследнейВыгрузкиСувениры") Тогда
			ДатаПоследнейВыгрузкиСувениры = Настройки.ДатаПоследнейВыгрузкиСувениры;
		Иначе
			ДатаПоследнейВыгрузкиСувениры = '00010101';
			Настройки.Вставить("ДатаПоследнейВыгрузкиСувениры",ДатаПоследнейВыгрузкиСувениры);						
		КонецЕсли; 
		
		Если Настройки.Свойство("НеОтправлятьНаСайт") Тогда
			НеОтправлятьНаСайт = Настройки.НеОтправлятьНаСайт;
		Иначе
			НеОтправлятьНаСайт = Ложь;
			Настройки.Вставить("НеОтправлятьНаСайт",НеОтправлятьНаСайт);						
		КонецЕсли; 
	
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,Настройки);
		
		Если Не ЗначениеЗаполнено(ПоследнийВыгруженныйОбъектСувениры) Тогда
			Если ДатаПоследнейВыгрузкиСувениры >= НачалоДня(ТекущаяДатаСеанса()) Тогда
				// Выгрузка сегодня уже была
				Результат = СтруктураСообщенияОбОшибке();
				Результат.Успешно = Истина;
				Возврат Результат;
			КонецЕсли; 	
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	НоменклатураСпр.Ссылка КАК Guid,
		               |	ЕСТЬNULL(Сув_НаименованиеДляСайта.Значение.Наименование, &ПредставлениеNULL) КАК НаименованиеДляСайта,
		               |	НоменклатураСпр.НаименованиеПолное КАК НаименованиеПолное,
		               |	НоменклатураСпр.Артикул КАК Артикул,
		               |	НоменклатураСпр.Производитель КАК Производитель,
		               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних1.Цена, 0) КАК ЦенаСоСкидкой,
		               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
		               |	НоменклатураСпр.Описание КАК Описание,
		               |	ЕСТЬNULL(Сув_Измерение1.Значение, &ПредставлениеNULL) КАК Измерение1,
		               |	ЕСТЬNULL(Сув_Измерение2.Значение, &ПредставлениеNULL) КАК Измерение2,
		               |	ЕСТЬNULL(Сув_Измерение3.Значение, &ПредставлениеNULL) КАК Измерение3,
		               |	ЕСТЬNULL(Сув_Вес.Значение, &ПредставлениеNULL) КАК Вес,
		               |	ЕСТЬNULL(Сув_СтранаПроизводитель.Значение, &ПредставлениеNULL) КАК СтранаПроизводитель,
		               |	ЕСТЬNULL(Сув_is_active.Значение, false) КАК is_active,
		               |	ЕСТЬNULL(Сув_is_available.Значение, false) КАК is_available,
		               |	ЕСТЬNULL(Сув_Материал.Значение, &ПредставлениеNULL) КАК Материал,
		               |	ЕСТЬNULL(Сув_Цвет.Значение, &ПредставлениеNULL) КАК Цвет,
		               |	ЕСТЬNULL(Сув_ТорговаяМарка.Значение, &ПредставлениеNULL) КАК ТорговаяМарка,
		               |	ЕСТЬNULL(Сув_Объем.Значение, &ПредставлениеNULL) КАК Объем,
		               |	ЕСТЬNULL(Сув_ISBN.Значение.Наименование, &ПредставлениеNULL) КАК ISBN,
		               |	ЕСТЬNULL(Сув_Категория.Значение, &ПредставлениеNULL) КАК Категория,
		               |	НоменклатураПрисоединенныеФайлы.Расширение КАК Изображение
		               |ИЗ
		               |	Справочник.Номенклатура КАК НоменклатураСпр
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		               |		ПО НоменклатураСпр.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ЦенаСоСкидкой) КАК ЦеныНоменклатурыСрезПоследних1
		               |		ПО НоменклатураСпр.Ссылка = ЦеныНоменклатурыСрезПоследних1.Номенклатура
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Сув_Материал
		               |		ПО (Сув_Материал.Свойство = &Сув_Материал)
		               |			И НоменклатураСпр.Ссылка = Сув_Материал.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Сув_Цвет
		               |		ПО (Сув_Цвет.Свойство = &Сув_Цвет)
		               |			И НоменклатураСпр.Ссылка = Сув_Цвет.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Сув_ТорговаяМарка
		               |		ПО (Сув_ТорговаяМарка.Свойство = &Сув_ТорговаяМарка)
		               |			И НоменклатураСпр.Ссылка = Сув_ТорговаяМарка.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Сув_НаименованиеДляСайта
		               |		ПО (Сув_НаименованиеДляСайта.Свойство = &Сув_НаименованиеДляСайта)
		               |			И НоменклатураСпр.Ссылка = Сув_НаименованиеДляСайта.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Сув_Объем
		               |		ПО (Сув_Объем.Свойство = &Сув_Объем)
		               |			И НоменклатураСпр.Ссылка = Сув_Объем.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Сув_Измерение1
		               |		ПО (Сув_Измерение1.Свойство = &Сув_Измерение1)
		               |			И НоменклатураСпр.Ссылка = Сув_Измерение1.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Сув_Измерение2
		               |		ПО (Сув_Измерение2.Свойство = &Сув_Измерение2)
		               |			И НоменклатураСпр.Ссылка = Сув_Измерение2.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Сув_Измерение3
		               |		ПО (Сув_Измерение3.Свойство = &Сув_Измерение3)
		               |			И НоменклатураСпр.Ссылка = Сув_Измерение3.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Сув_Вес
		               |		ПО (Сув_Вес.Свойство = &Сув_Вес)
		               |			И НоменклатураСпр.Ссылка = Сув_Вес.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Сув_СтранаПроизводитель
		               |		ПО (Сув_СтранаПроизводитель.Свойство = &Сув_СтранаПроизводитель)
		               |			И НоменклатураСпр.Ссылка = Сув_СтранаПроизводитель.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Сув_is_active
		               |		ПО (Сув_is_active.Свойство = &Сув_is_active)
		               |			И НоменклатураСпр.Ссылка = Сув_is_active.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Сув_is_available
		               |		ПО (Сув_is_available.Свойство = &Сув_is_available)
		               |			И НоменклатураСпр.Ссылка = Сув_is_available.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Сув_ISBN
		               |		ПО (Сув_ISBN.Свойство = &Сув_ISBN)
		               |			И НоменклатураСпр.Ссылка = Сув_ISBN.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Сув_Категория
		               |		ПО (Сув_Категория.Свойство = &Сув_Категория)
		               |			И НоменклатураСпр.Ссылка = Сув_Категория.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
		               |		ПО НоменклатураСпр.Ссылка = НоменклатураПрисоединенныеФайлы.ВладелецФайла
		               |ГДЕ
		               |	НоменклатураПрисоединенныеФайлы.Ссылка <> ЗНАЧЕНИЕ(Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка)
		               |	И НоменклатураСпр.НаименованиеПолное <> """"
		               |	И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних1.Цена, 0) <> 0
		               |	И Сув_Вес.Значение <> """"
		               |	И НоменклатураСпр.Ссылка > &ПоследнийВыгруженныйОбъект
		               |	И НЕ НоменклатураСпр.ПометкаУдаления
   		               |	И ИСТИНА
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Guid";
		
		Если РазмерПакета > 0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВЫБРАТЬ РАЗЛИЧНЫЕ",СТрШаблон("ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ %1 ",Формат(РазмерПакета,"ЧДЦ=0; ЧГ=0")));
		КонецЕсли;	
		
		Номенклатура = ЭтотОбъект.РодительСув;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			ТекстЗамены  = "И ИСТИНА";			
			Если Номенклатура.ЭтоГруппа Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстЗамены, "И НоменклатураСпр.Ссылка В ИЕРАРХИИ (&Номенклатура)");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстЗамены,"И НоменклатураСпр.Ссылка = &Номенклатура");
				ПоследнийВыгруженныйОбъектСувениры = Справочники.Номенклатура.ПустаяСсылка();
			КонецЕсли; 	
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		КонецЕсли; 
		
		
		Запрос.УстановитьПараметр("ПредставлениеNULL","");
		Запрос.УстановитьПараметр("ПоследнийВыгруженныйОбъект", ПоследнийВыгруженныйОбъектСувениры);
		Запрос.УстановитьПараметр("ВидЦены", ЭтотОбъект.ВидЦенСувениры);
		Запрос.УстановитьПараметр("ЦенаСоСкидкой", ЭтотОбъект.ЦенаСоСкидкойСувениры);
		Запрос.УстановитьПараметр("Сув_Материал", ЭтотОбъект.Сув_Материал);
		Запрос.УстановитьПараметр("Сув_Цвет", ЭтотОбъект.Сув_Цвет);
		Запрос.УстановитьПараметр("Сув_ТорговаяМарка", ЭтотОбъект.Сув_ТорговаяМарка);
		Запрос.УстановитьПараметр("Сув_НаименованиеДляСайта", ЭтотОбъект.Сув_НаименованиеДляСайта);
		Запрос.УстановитьПараметр("Сув_Объем", ЭтотОбъект.Сув_Объем);
		Запрос.УстановитьПараметр("Сув_Измерение1", ЭтотОбъект.Сув_Измерение1);
		Запрос.УстановитьПараметр("Сув_Измерение2", ЭтотОбъект.Сув_Измерение2);
		Запрос.УстановитьПараметр("Сув_Измерение3", ЭтотОбъект.Сув_Измерение3);
		Запрос.УстановитьПараметр("Сув_Вес", ЭтотОбъект.Сув_Вес);
		Запрос.УстановитьПараметр("Сув_СтранаПроизводитель", ЭтотОбъект.Сув_СтранаПроизводитель);
		Запрос.УстановитьПараметр("Сув_is_active", ЭтотОбъект.Сув_is_active);
		Запрос.УстановитьПараметр("Сув_is_available", ЭтотОбъект.Сув_is_available);
		Запрос.УстановитьПараметр("Сув_ISBN", ЭтотОбъект.Сув_ISBN);
		Запрос.УстановитьПараметр("Сув_Категория", ЭтотОбъект.Сув_Категория);
				
		
		РезультатЗапроса = Запрос.Выполнить();	  
		
		Если РезультатЗапроса.Пустой() Тогда
			
			// выгружен последний пакет
			ПоследнийВыгруженныйОбъектСувениры = Справочники.Номенклатура.ПустаяСсылка();
			ДатаПоследнейВыгрузкиСувениры = НачалоДня(ТекущаяДатаСеанса());
			
			Результат = СтруктураСообщенияОбОшибке();
			Результат.Успешно = Истина;
			
		Иначе
			
			Выборка = РезультатЗапроса.Выбрать();
			МассивПозиций = Новый Массив;
			
			КаталогКартинок = КаталогКартинок(); 
			Пока Выборка.Следующий() Цикл
				
				ПоследнийВыгруженныйОбъектСувениры = Выборка.Guid;
				
				ПолноеИмяФайлаКартинки = СтрШаблон("%1%2.%3",
					КаталогКартинок,
					ИмяФайлаКартинки(Выборка.Guid,Выборка.НаименованиеПолное),
					Выборка.Изображение);
				ДанныеПозиции = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Выборка);
				ДанныеПозиции.Вставить("Изображение", ПолноеИмяФайлаКартинки);
				СерилизоватьДанные(ДанныеПозиции);
				МассивПозиций.Добавить(ДанныеПозиции);
				
			КонецЦикла; 
			
			// выгружаемые данные
			СтруктураВыгрузки = Новый Структура;
			
			ВыгружаемыеСправочники = Новый Структура;
			ВыгружаемыеСправочники.Вставить("souvenir_materials",	ЭтотОбъект.Сув_Материал);
			ВыгружаемыеСправочники.Вставить("souvenir_colors",		ЭтотОбъект.Сув_Цвет);
			ВыгружаемыеСправочники.Вставить("souvenir_brands",		ЭтотОбъект.Сув_ТорговаяМарка);
			ВыгружаемыеСправочники.Вставить("souvenir_categories", 	ЭтотОбъект.Сув_Категория);
			
			// выгрузка справочников
			Для каждого ВыгружаемыйСправочник Из ВыгружаемыеСправочники Цикл
				МассивЭлементов = ДанныеСправочника(ВыгружаемыйСправочник.Значение);
				СтруктураВыгрузки.Вставить(ВыгружаемыйСправочник.Ключ, МассивЭлементов);				
			КонецЦикла; 
			
			// выгрузка сувениров 						
			СтруктураВыгрузки.Вставить("souvenirs", МассивПозиций); 
			КоличествоКВыгрузке = МассивПозиций.Количество();
			
			ЗаписьJSON = Новый ЗаписьJSON();
			ЗаписьJSON.УстановитьСтроку();
			ЗаписьJSON.ПроверятьСтруктуру = Ложь;	
			
			ЗаписатьJSON(ЗаписьJSON, СтруктураВыгрузки);
			СтрокаJSON = ЗаписьJSON.Закрыть();
			
			ЗаписатьВЖурнал(СтрокаJSON, Настройки);
			
			Если НеОтправлятьНаСайт = Ложь Тогда	
				Результат = ОтправитьДанныеНаСайт(Настройки, СтрокаJSON);
			КонецЕсли;	
				
			Результат.Вставить("Данные",Новый Структура("ВыгруженоОбъектов",КоличествоКВыгрузке));
			
			Результат.Успешно = Истина;
		КонецЕсли; 
		
		Если Результат.Успешно Тогда
			Настройки.ПоследнийВыгруженныйОбъектСувениры = ПоследнийВыгруженныйОбъектСувениры;
			Настройки.ДатаПоследнейВыгрузкиСувениры = ДатаПоследнейВыгрузкиСувениры;
			СохранитьНастройки(Настройки);
		КонецЕсли; 
		
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru = 'Ошибка получения данных для выгрузки на сайт: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения,КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Результат.Успешно = Ложь;
		Результат.ОписаниеОшибки = ТекстСообщения;	
		Результат.Удалить("Данные");
	КонецПопытки;
	
	
	Возврат Результат;
	
КонецФункции

Функция ИмяФайлаКартинки(НоменлатураСсылка,НоменклатураНаименование)
	
	МассивНедопустимыхСимволов = Новый Массив;
	МассивНедопустимыхСимволов.Добавить(" ");
	МассивНедопустимыхСимволов.Добавить(Символы.ВК);
	МассивНедопустимыхСимволов.Добавить(Символы.ВТаб);
	МассивНедопустимыхСимволов.Добавить(Символы.НПП);
	МассивНедопустимыхСимволов.Добавить(Символы.ПС);
	МассивНедопустимыхСимволов.Добавить(Символы.ПФ);
	МассивНедопустимыхСимволов.Добавить(Символы.Таб);
	ИмяФайлаКартинки = НоменклатураНаименование;
	Для каждого НедопустимыйСимвол Из МассивНедопустимыхСимволов Цикл
		ИмяФайлаКартинки = СтрЗаменить(ИмяФайлаКартинки,НедопустимыйСимвол,"_");	
	КонецЦикла; 
	ИмяФайлаКартинки = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ИмяФайлаКартинки);	
	//ИмяФайлаКартинки = СтандартныеПодсистемыСервер.ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(ИмяФайлаКартинки);
	ИмяФайлаКартинки = СтрШаблон("pic_%1_%2",Лев(ИмяФайлаКартинки,150),XMLСтрока(НоменлатураСсылка));
	
	НедопустимыеСимволы = ":;!@#$%^&-~`'.,?{}[]+=*/|\ ()_""<>—";
	МассивСтрок = СтрРазделить(ИмяФайлаКартинки,НедопустимыеСимволы,Ложь);
	ИмяФайлаКартинки = СтрСоединить(МассивСтрок,"_");
	ИмяФайлаКартинки = СтрЗаменить(ИмяФайлаКартинки,"__","_");
	
	// на всякий случай. жесткий фильтр оставляющий только цифры, латинские буквы и "_" в имени.
	ИмяФайлаКартинки = СтрСоединить(СтрРазделить(ИмяФайлаКартинки, СтрСоединить(СтрРазделить(ИмяФайлаКартинки, "0123456789qwertyuiopasdfghjklzxcvbnm_QWERTYUIOPASDFGHJKLZXCVBNM"))));
	
	Возврат ИмяФайлаКартинки;
	
КонецФункции
 
Функция КаталогКартинок()
	Возврат ""; // "/5032292394/Images/";	
КонецФункции
 
Функция ВыгрузитьКартинки(КаталогВыгрузки, Номенклатура, ПараметрыFTP) Экспорт
	
	Результат = ЗагрузитьНастройки();
	Если Не Результат.Успешно Тогда
		Возврат Результат;	
	КонецЕсли; 
	
	Попытка
		
		Настройки = Результат.Данные;

		Если КаталогВыгрузки = Неопределено Тогда
			
			// если параметры не заданы, читаем их из настроек.
			Если Настройки.Свойство("КаталогВыгрузки") Тогда
				КаталогВыгрузки = Настройки.КаталогВыгрузки;
			Иначе
				 ВызватьИсключение "Не задан каталог выгрузки";
			КонецЕсли; 
			
			Если Настройки.Свойство("Номенклатура") Тогда
				Номенклатура = Настройки.Номенклатура;
			Иначе
				Номенклатура = Неопределено;
			КонецЕсли; 
			
			ПараметрыFTP = Новый Структура;
			
			Для каждого ЭлементНастройки Из Настройки Цикл
				Имя = ЭлементНастройки.Ключ;
				Если СтрНайти(Имя,"FTP") = 0 Тогда
					Продолжить;	
				КонецЕсли; 
				ПараметрыFTP.Вставить(Имя, ЭлементНастройки.Значение);		
			КонецЦикла; 
		
		КонецЕсли; 	
		
		Если Настройки.Свойство("ПоследняяВыгруженнаяКартинка") Тогда
			ПоследняяВыгруженнаяКартинка = Настройки.ПоследняяВыгруженнаяКартинка;
		Иначе
			ПоследняяВыгруженнаяКартинка = Справочники.НоменклатураПрисоединенныеФайлы.ПустаяСсылка();
			Настройки.Вставить("ПоследняяВыгруженнаяКартинка",ПоследняяВыгруженнаяКартинка);
		КонецЕсли; 
		
		Если Настройки.Свойство("РазмерПакета") Тогда
			РазмерПакета = Настройки.РазмерПакета;
		Иначе
			РазмерПакета = 0;
			Настройки.Вставить("РазмерПакета",РазмерПакета);			
		КонецЕсли;
		
		Если Настройки.Свойство("ДатаПоследнейВыгрузкиКартинок") Тогда
			ДатаПоследнейВыгрузкиКартинок = Настройки.ДатаПоследнейВыгрузкиКартинок;
		Иначе
			ДатаПоследнейВыгрузкиКартинок = '00010101';
			Настройки.Вставить("ДатаПоследнейВыгрузкиКартинок",ДатаПоследнейВыгрузкиКартинок);						
		КонецЕсли; 
				
		Если Настройки.Свойство("ТолькоИзмененныеСПоследнейВыгрузкиКартинки") Тогда
			ТолькоИзмененныеСПоследнейВыгрузкиКартинки = Настройки.ТолькоИзмененныеСПоследнейВыгрузкиКартинки;
		Иначе
			ТолькоИзмененныеСПоследнейВыгрузкиКартинки = Ложь;
			Настройки.Вставить("ТолькоИзмененныеСПоследнейВыгрузкиКартинки", ТолькоИзмененныеСПоследнейВыгрузкиКартинки);						
		КонецЕсли; 
		
		Если Настройки.Свойство("ОжиданиеПередПовторомFTP") Тогда
			ОжиданиеПередПовторомFTP = Настройки.ОжиданиеПередПовторомFTP;
		Иначе
			ОжиданиеПередПовторомFTP = 20;
			Настройки.Вставить("ОжиданиеПередПовторомFTP",ОжиданиеПередПовторомFTP);						
		КонецЕсли; 
		
		Если Настройки.Свойство("КоличествоПотоковFTP") Тогда
			КоличествоПотоковFTP = Настройки.КоличествоПотоковFTP;
		Иначе
			КоличествоПотоковFTP = 20;
			Настройки.Вставить("КоличествоПотоковFTP",КоличествоПотоковFTP);						
		КонецЕсли; 		
				
		Если Настройки.Свойство("КоличествоЗаданийВПотокеFTP") Тогда
			КоличествоЗаданийВПотокеFTP = Настройки.КоличествоЗаданийВПотокеFTP;
		Иначе
			КоличествоЗаданийВПотокеFTP = 50;
			Настройки.Вставить("КоличествоЗаданийВПотокеFTP",КоличествоЗаданийВПотокеFTP);						
		КонецЕсли; 		
		
		
		СоединениеFTP = Неопределено;

		Если ПараметрыFTP.ВыгружатьНаFTP Тогда
			СтруктураURL = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыFTP.АдресFTPСервера);
			
			Протокол = ?(ПустаяСтрока(СтруктураURL.Схема), "ftp", СтруктураURL.Схема);
			Порт = ?(Не ЗначениеЗаполнено(СтруктураURL.Порт), 21, Число(СтруктураURL.Порт));
			
			ЗащищенноеСоединение = Неопределено;
			Если (Протокол = "https" Или Протокол = "ftps") И ЗащищенноеСоединение = Неопределено Тогда
				ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрыFTP.ЛогинFTP) Тогда
				ЛогинFTP = ПараметрыFTP.ЛогинFTP;
			Иначе
				ЛогинFTP = СтруктураURL.Логин;
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(ПараметрыFTP.ПарольFTP) Тогда
				ПарольFTP = ПараметрыFTP.ПарольFTP;
			Иначе
				ПарольFTP = СтруктураURL.Пароль;
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(ПараметрыFTP.УдаленныйКаталогFTP) Тогда
				УдаленныйКаталогFTP = ПараметрыFTP.УдаленныйКаталогFTP;
			Иначе
				УдаленныйКаталогFTP = СтруктураURL.ПутьНаСервере;
			КонецЕсли; 
			
			ПроксиСервер = Новый ИнтернетПрокси(Истина);
			
			
			Если ЭтоВнешняяОбработка() Тогда
				МакетОбработки = ПолучитьМакет("МакетОбработки");
				ИмяФайлаОбработки = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолучитьИмяВременногоФайла()).Путь; 
				ИмяФайлаОбработки = СтрШаблон("%1ep_upload.epf", ИмяФайлаОбработки); 
				МакетОбработки.Записать(ИмяФайлаОбработки);
				
				ХранениеФайлаОбработки = ИмяФайлаОбработки;
			КонецЕсли; 
			
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НоменклатураПрисоединенныеФайлы.Ссылка КАК ФайлКартинки,
		|	НоменклатураПрисоединенныеФайлы.Наименование КАК Наименование,
		|	НоменклатураПрисоединенныеФайлы.ВладелецФайла КАК Номенклатура,
		|	НоменклатураПрисоединенныеФайлы.Расширение КАК Расширение,
		|	НоменклатураПрисоединенныеФайлы.ВладелецФайла.НаименованиеПолное КАК НоменклатураНаименование,
		|	НоменклатураПрисоединенныеФайлы.ДатаМодификацииУниверсальная,
		|	НоменклатураПрисоединенныеФайлы.Размер КАК Размер
		|ИЗ
		|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
		|ГДЕ
		|	НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления
		|	И НЕ НоменклатураПрисоединенныеФайлы.ЭтоГруппа
		|	И (НоменклатураПрисоединенныеФайлы.ВладелецФайла, НоменклатураПрисоединенныеФайлы.ДатаМодификацииУниверсальная) В
		|			(ВЫБРАТЬ
		|				НоменклатураПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		|				МАКСИМУМ(НоменклатураПрисоединенныеФайлы.ДатаМодификацииУниверсальная) КАК ДатаМодификацииУниверсальная
		|			ИЗ
		|				Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
		|			СГРУППИРОВАТЬ ПО
		|				НоменклатураПрисоединенныеФайлы.ВладелецФайла)
		|	И НоменклатураПрисоединенныеФайлы.Ссылка > &ПоследнийВыгруженныйОбъект
		|	И НоменклатураПрисоединенныеФайлы.ДатаМодификацииУниверсальная > &ДатаПоследнейВыгрузкиКартинок
		|	И ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФайлКартинки";
		
		Если РазмерПакета > 0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВЫБРАТЬ РАЗЛИЧНЫЕ",СТрШаблон("ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ %1 ",Формат(РазмерПакета,"ЧДЦ=0; ЧГ=0")));
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			ТекстЗамены  = "И ИСТИНА";
			Если Номенклатура.ЭтоГруппа Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстЗамены, "И НоменклатураПрисоединенныеФайлы.ВладелецФайла В ИЕРАРХИИ (&Номенклатура)");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстЗамены,"И НоменклатураПрисоединенныеФайлы.ВладелецФайла = &Номенклатура");
				ПоследнийВыгруженныйОбъект = Справочники.Номенклатура.ПустаяСсылка();
			КонецЕсли; 	
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		КонецЕсли;
		
		Если ТолькоИзмененныеСПоследнейВыгрузкиКартинки Тогда
			Запрос.УстановитьПараметр("ДатаПоследнейВыгрузкиКартинок", ДатаПоследнейВыгрузкиКартинок);
		Иначе
			Запрос.УстановитьПараметр("ДатаПоследнейВыгрузкиКартинок", '00010101');			
		КонецЕсли; 
		
		Запрос.УстановитьПараметр("ПоследнийВыгруженныйОбъект", ПоследняяВыгруженнаяКартинка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			// выгружен последний пакет
			ПоследняяВыгруженнаяКартинка = Справочники.НоменклатураПрисоединенныеФайлы.ПустаяСсылка();
			ДатаПоследнейВыгрузкиКартинок = НачалоДня(ТекущаяДатаСеанса());
			
			Результат = СтруктураСообщенияОбОшибке();
			Результат.Успешно = Истина;
			
		Иначе

			Выборка = РезультатЗапроса.Выбрать();
			
			Выгружено = 0;
			
			
			МассивФЗ = Новый Массив;
			КоличествоЗаданий = Макс(КоличествоПотоковFTP, 1); 
			КоличествоДанныхДляЗадания = Макс(КоличествоЗаданийВПотокеFTP, 10); 
			МассивДанныхЗадания = Новый Массив;
			
			Пока Выборка.Следующий() Цикл
				
				ДанныеКартинки = Выборка.ФайлКартинки;
				Расширение = Выборка.Расширение;
				НаименованиеФайла = ИмяФайлаКартинки(Выборка.Номенклатура, Выборка.НоменклатураНаименование);
				Картинка = РаботаСФайлами.ДвоичныеДанныеФайла(ДанныеКартинки);
				ИмяФайла =  СтрШаблон("%1.%2", НаименованиеФайла, Расширение);
				ПолноеИмяФайла = СтрШаблон("%1\%2",КаталогВыгрузки, ИмяФайла);			
				Картинка.Записать(ПолноеИмяФайла);			
				Если ПараметрыFTP.ВыгружатьНаFTP Тогда
					
					МассивДанныхЗадания.Добавить(Новый Структура("ПолноеИмяФайла, ИмяФайла", ПолноеИмяФайла, ИмяФайла));
					
					// если набралось достаточно документов для запуска ФЗ - идем дальше
					Если МассивДанныхЗадания.Количество() = КоличествоДанныхДляЗадания Тогда
						// проверяем есть ли свободные ФЗ, иначе ждем
						Пока МассивФЗ.Количество() = КоличествоЗаданий Цикл
							Для Каждого ФЗ ИЗ МассивФЗ Цикл
								ОтборФЗ = Новый Структура;
								ОтборФЗ.Вставить("УникальныйИдентификатор", ФЗ); 
								МассивАктивныхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФЗ);
								Для Каждого Задание Из МассивАктивныхЗаданий Цикл
									Если НЕ Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
										ЗаписатьВЖурнал(СтрШаблон("Отправка FTP. Задание(%1) Статус завершения %2. %3", 
												Задание.УникальныйИдентификатор, Задание.Состояние, 
												?(Задание.ИнформацияОбОшибке = Неопределено, "",КраткоеПредставлениеОшибки(Задание.ИнформацияОбОшибке))), 
												Настройки);
										МассивФЗ.Удалить(МассивФЗ.Найти(ФЗ));
										Прервать; // выйдем из "бесконечного" цикла, когда хотя бы одно из заданий закончилось
									КонецЕсли;
								КонецЦикла;
							КонецЦикла; 
						КонецЦикла;
						
						// запускаем ФЗ
						ПараметрыЗадания = Новый Структура;						
						ПараметрыЗадания.Вставить("ХранениеФайлаОбработки", ХранениеФайлаОбработки);
						ПараметрыЗадания.Вставить("МассивДанныхЗадания", МассивДанныхЗадания);						
						ПараметрыЗадания.Вставить("Настройки", Настройки);						
						ПараметрыЗадания.Вставить("Хост", СтруктураURL.Хост);						
						ПараметрыЗадания.Вставить("Порт", Порт);
						ПараметрыЗадания.Вставить("ЛогинFTP", ЛогинFTP);
						ПараметрыЗадания.Вставить("ПарольFTP", ПарольFTP);
						ПараметрыЗадания.Вставить("ПроксиСервер", ПроксиСервер);
						ПараметрыЗадания.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
						ПараметрыЗадания.Вставить("УдаленныйКаталогFTP", УдаленныйКаталогFTP);
						ПараметрыЗадания.Вставить("ОжиданиеПередПовторомFTP", ОжиданиеПередПовторомFTP);
						
						ФЗ = НачатьВыполнениеФоновогоЗадания(ПараметрыЗадания);
						ЗаписатьВЖурнал(СтрШаблон("Отправка FTP. Задание (%1). Статус задания %2. Файлы к отправке %3", 
									ФЗ.ИдентификаторЗадания, ФЗ.Статус, ДанныеВJSON(ПараметрыЗадания.МассивДанныхЗадания)), Настройки);
						МассивФЗ.Добавить(ФЗ.ИдентификаторЗадания);
						МассивДанныхЗадания = Новый Массив;
					КонецЕсли; // КоличествоДанныхДляЗадания					
									
					
					//КоличествоПопыток = 5;
					//ПоследняяОшибка  = "";
					//
					//Для НомерПопытки = 1 По КоличествоПопыток Цикл
					//	
					//	Попытка
					//		
					//		СоединениеFTP = Новый FTPСоединение(СтруктураURL.Хост, Порт , ЛогинFTP, ПарольFTP, ПроксиСервер, Истина, 180, ЗащищенноеСоединение);
					//		Если Не ПустаяСтрока(УдаленныйКаталогFTP) Тогда
					//			СоединениеFTP.УстановитьТекущийКаталог(УдаленныйКаталогFTP);	
					//		КонецЕсли; 
					//		
					//		СоединениеFTP.Записать(ПолноеИмяФайла, ИмяФайла); 	
					//		
					//		СоединениеFTP = Неопределено;
					//		
					//		Прервать;
					//	Исключение
					//		ИнформацияОбОшибке = ИнформацияОбОшибке();
					//        ПоследняяОшибка = СтрШаблон("%1. Текушая картинка %2. Выгружено картинок %3",
					//			КраткоеПредставлениеОшибки(ИнформацияОбОшибке), Выборка.НоменклатураНаименование, Выгружено);
					//	КонецПопытки;
					//	
					//	ТекущаяДатаВремя = ТекущаяДатаСеанса();
					//	ОжидаемДо = ТекущаяДатаВремя + ОжиданиеПередПовторомFTP;
					//	Пока ТекущаяДатаВремя < ОжидаемДо Цикл
					//		ТекущаяДатаВремя = ТекущаяДатаСеанса();	
					//	КонецЦикла; 
					//	
					//КонецЦикла;
					//
					//Если НомерПопытки > КоличествоПопыток Тогда
					//	ВызватьИсключение ПоследняяОшибка;
					//КонецЕсли; 
					
				КонецЕсли; 
				
				Если (Выборка.Размер > 200000) И (КаталогВыгрузки <> Неопределено) Тогда
					ТекстСообщения = СтрШаблон("Картинка к %1 имеет размер более 200К",Выборка.НоменклатураНаименование);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);		
				КонецЕсли; 
				
				Выгружено = Выгружено + 1;
				ПоследняяВыгруженнаяКартинка = ДанныеКартинки;					
				
			КонецЦикла;
			Если ПараметрыFTP.ВыгружатьНаFTP Тогда
				Если МассивДанныхЗадания.Количество() > 0 Тогда
					// запускаем ФЗ
					ПараметрыЗадания = Новый Структура;						
					ПараметрыЗадания.Вставить("ХранениеФайлаОбработки", ХранениеФайлаОбработки);
					ПараметрыЗадания.Вставить("МассивДанныхЗадания", МассивДанныхЗадания);						
					ПараметрыЗадания.Вставить("Настройки", Настройки);						
					ПараметрыЗадания.Вставить("Хост", СтруктураURL.Хост);						
					ПараметрыЗадания.Вставить("Порт", Порт);
					ПараметрыЗадания.Вставить("ЛогинFTP", ЛогинFTP);
					ПараметрыЗадания.Вставить("ПарольFTP", ПарольFTP);
					ПараметрыЗадания.Вставить("ПроксиСервер", ПроксиСервер);
					ПараметрыЗадания.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
					ПараметрыЗадания.Вставить("УдаленныйКаталогFTP", УдаленныйКаталогFTP);
					ПараметрыЗадания.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
					ПараметрыЗадания.Вставить("ИмяФайла", ИмяФайла);						
					ПараметрыЗадания.Вставить("ОжиданиеПередПовторомFTP", ОжиданиеПередПовторомFTP);
					
					ФЗ = НачатьВыполнениеФоновогоЗадания(ПараметрыЗадания);
					ЗаписатьВЖурнал(СтрШаблон("Отправка FTP. Задание (%1). Статус задания %2. Файлы к отправке %3", 
							ФЗ.ИдентификаторЗадания, ФЗ.Статус, ДанныеВJSON(ПараметрыЗадания.МассивДанныхЗадания)), Настройки);
				КонецЕсли;				
			КонецЕсли; 
			
			
			Результат.Вставить("Данные",Новый Структура("ВыгруженоОбъектов",Выгружено));
			Результат.Успешно = Истина;
			Результат.ОписаниеОшибки = "";	
			
		КонецЕсли;	
		
		Если Результат.Успешно Тогда
			Настройки.ПоследняяВыгруженнаяКартинка = ПоследняяВыгруженнаяКартинка;
			Настройки.ДатаПоследнейВыгрузкиКартинок = ДатаПоследнейВыгрузкиКартинок;
			СохранитьНастройки(Настройки);
		КонецЕсли; 
	
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru = 'Ошибка выгрузки картинок: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения,КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Результат.Успешно = Ложь;
		Результат.ОписаниеОшибки = ТекстСообщения;	
	КонецПопытки;
	
	Возврат Результат;
КонецФункции 

Функция ПолучитьСтруктуруСтроки(РезультатЗапроса)
	
	Структура = Новый Структура;
	Для Каждого Кол Из РезультатЗапроса.Колонки Цикл
		Структура.Вставить(Кол.Имя);	
	КонецЦикла;	
	Возврат Структура;
	
КонецФункции

Процедура СерилизоватьДанные(Структура)
	
	Для Каждого Эл Из Структура Цикл
		
		Значение = Эл.Значение;
		ТипЗначения = ТипЗнч(Значение);
		
		Если ТипЗначения = Тип("Строка") Тогда
			//	
		ИначеЕсли ТипЗначения = Тип("Число") Тогда
			//
		ИначеЕсли ТипЗначения = Тип("Булево") Тогда
			//
		ИначеЕсли ТипЗнч(Значение) = Тип("null") Тогда
			Структура[Эл.Ключ] = "";
		ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда 
			Если Значение.Пустая() Тогда
				Структура[Эл.Ключ] = "";
			Иначе
				Структура[Эл.Ключ] = XMLСтрока(Значение);			
			КонецЕсли; 			
		Иначе
			Структура[Эл.Ключ] = XMLСтрока(Значение);
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры

Функция СтруктураСообщенияОбОшибке()
	Возврат Новый Структура("Успешно,ОписаниеОшибки",Ложь,"");	
КонецФункции //ПолучитьСтрукутруСообщенияОбОшибке

Функция КлючНастроек()

	Возврат "НастройкиВыгрузкиДанныхНаСайт_dostoevsky_club";

КонецФункции // КлючНастроек()
 
Функция ЗагрузитьНастройки() Экспорт

	Попытка
		Результат = СтруктураСообщенияОбОшибке();
		КлючНастроек = КлючНастроек();
		Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(КлючНастроек,КлючНастроек); 		
		Результат.Успешно = Истина;
		Результат.Вставить("Данные",Данные);
	Исключение
	    ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru = 'Ошибка загрузки параметров: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения,КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Результат.Успешно = Ложь;
		Результат.ОписаниеОшибки = ТекстСообщения;	
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // ЗагрузитьНастройки()
 
Функция СохранитьНастройки(СтруктураНастроек) Экспорт

	Попытка
		Результат = СтруктураСообщенияОбОшибке();
		КлючНастроек = КлючНастроек();
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(КлючНастроек, СтруктураНастроек, КлючНастроек); 		
		Результат.Успешно = Истина;
	Исключение
	    ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru = 'Ошибка сохранения параметров выгрузки на сайт: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения,КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Результат.Успешно = Ложь;
		Результат.ОписаниеОшибки = ТекстСообщения;	
	КонецПопытки;
	
	Возврат Результат;

КонецФункции // СохранитьНастройки()

Функция ЭтоВнешняяОбработка()
	
	ЧастиИмени = СтрРазделить(Метаданные().ПолноеИмя(), ".");
	Возврат (ВРег(ЧастиИмени[0]) = "ВНЕШНЯЯОБРАБОТКА")
	
КонецФункции

Функция НачатьВыполнениеФоновогоЗадания(ПараметрыВыполненияОбработки)
	
	ХранениеФайлаОбработки = ПараметрыВыполненияОбработки.ХранениеФайлаОбработки;
	
	ЭтоВнешняяОбработка = ЭтоВнешняяОбработка();
	ИмяОбработки = ?(ЭтоВнешняяОбработка, ХранениеФайлаОбработки, Метаданные().ПолноеИмя());
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяОбработки",		ИмяОбработки);
	ПараметрыЗадания.Вставить("ИмяМетода",			"ВыгрузитьФайлыНаFTP");
	ПараметрыЗадания.Вставить("ПараметрыВыполнения",	ПараметрыВыполненияОбработки);
	ПараметрыЗадания.Вставить("ЭтоВнешняяОбработка",	ЭтоВнешняяОбработка);
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выгрузка файлов на ftp'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", УникальныйИдентификатор); 
	
	ВыполняемыйМетод = "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки"; // Выполняем процедуру из модуля объекта
	Возврат ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗадания, ПараметрыВыполнения);
	
КонецФункции


// для обхода безопасного режима сообщения защиты от опасных действий
//Процедура ОбработкаДанныхВФоне(ПараметрыЗадания, АдресРезультата) Экспорт

//	ЭтоВнешняяОбработка = ЭтоВнешняяОбработка();
//	Если ЭтоВнешняяОбработка Тогда 
//		ОбработкаОбъект = ВнешниеОбработки.Создать(ПараметрыЗадания.ХранениеФайлаОбработки, Ложь, ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений());
//		Результат = ОбработкаОбъект.ВыгрузитьФайлыНаFTP(ПараметрыЗадания);
//	Иначе
//		Результат = ВыгрузитьФайлыНаFTP(ПараметрыЗадания);
//	КонецЕсли;

//	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
//	
//КонецПроцедуры

Процедура ВыгрузитьФайлыНаFTP(ПараметрыЗадания, АдресРезультата) Экспорт
	
	Результат = СтруктураСообщенияОбОшибке();
	
	
	ИмяСобытия = "Отправка FTP:";
	
	КоличествоПопыток = 10;
	ПоследняяОшибка  = "";
	
	ЗаписыватьВЖурнал = ПараметрыЗадания.Свойство("Настройки");
	
	Если ЗаписыватьВЖурнал Тогда
		Настройки = ПараметрыЗадания.Настройки;
	//	ЗаписатьВЖурнал(СтрШаблон("%1 Начало выгрузки. Файлы к отправке: %2", ИмяСобытия, ДанныеВJSON(ПараметрыЗадания.МассивДанныхЗадания)), Настройки);
	КонецЕсли; 
	
	Для каждого ЗаданиеFTP Из ПараметрыЗадания.МассивДанныхЗадания Цикл
		
		Для НомерПопытки = 1 По КоличествоПопыток Цикл
			
			Попытка
				
				СоединениеFTP = Новый FTPСоединение(ПараметрыЗадания.Хост, ПараметрыЗадания.Порт , ПараметрыЗадания.ЛогинFTP, ПараметрыЗадания.ПарольFTP, 
							ПараметрыЗадания.ПроксиСервер, Истина, 180, ПараметрыЗадания.ЗащищенноеСоединение);
				Если Не ПустаяСтрока(ПараметрыЗадания.УдаленныйКаталогFTP) Тогда
					СоединениеFTP.УстановитьТекущийКаталог(ПараметрыЗадания.УдаленныйКаталогFTP);	
				КонецЕсли; 
				
				СоединениеFTP.Записать(ЗаданиеFTP.ПолноеИмяФайла, ЗаданиеFTP.ИмяФайла); 	
								
				СоединениеFTP = Неопределено;
				
				Результат.Успешно = Истина;
				
				//Если ЗаписыватьВЖурнал Тогда
				//	ЗаписатьВЖурнал(СтрШаблон("%1 Файл успешно отправлен: %2", ИмяСобытия, ЗаданиеFTP.ПолноеИмяФайла), Настройки);
				//КонецЕсли; 
				
				Прервать;
				
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
		        ПоследняяОшибка = СтрШаблон("%1. Текушая картинка %2.",
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке), ЗаданиеFTP.ИмяФайла);
					
				Если ЗаписыватьВЖурнал Тогда
					ЗаписатьВЖурнал(СтрШаблон("%1 ошибка отправки: %2", ИмяСобытия, ПоследняяОшибка), Настройки);
				КонецЕсли; 
					
			КонецПопытки;
			
			ТекущаяДатаВремя = ТекущаяДатаСеанса();
			ОжидаемДо = ТекущаяДатаВремя + ПараметрыЗадания.ОжиданиеПередПовторомFTP;
			Пока ТекущаяДатаВремя <= ОжидаемДо Цикл
				ТекущаяДатаВремя = ТекущаяДатаСеанса();	
			КонецЦикла; 
			
		КонецЦикла;
		
		//Если НомерПопытки > КоличествоПопыток Тогда
		//	Результат.Успешно = Ложь;
		//	Результат.ОписаниеОшибки = ПоследняяОшибка;
		//	Прервать;
		//КонецЕсли; 
	КонецЦикла; 
	
	//Если ЗаписыватьВЖурнал Тогда
	//	ЗаписатьВЖурнал(СтрШаблон("%1 Завершение выгрузки. Последняя ошибка %2.", ИмяСобытия, ПоследняяОшибка), Настройки);
	//КонецЕсли; 
	
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
КонецПроцедуры
 


////////////////////////////////////////////////////////////

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.4.5.71");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = "2.74";
	
	ПараметрыРегистрации.Информация = "Выгрузка номенклатуры на сайт dostoevsky-club.ru";
	
	//Открываем форму
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = НСтр("ru = 'Интерактивный запуск и установка настроек'");
	НоваяКоманда.Идентификатор = "НастроитьИВыполнитьВыгрузкуВручную";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	
	//Регламент книги
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = НСтр("ru = 'Запуск выгрузки книг по регламенту'");
	НоваяКоманда.Идентификатор = "ВыгрузкаКнигРегламент";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Истина;
	
	//Регламент сувениры
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = НСтр("ru = 'Запуск выгрузки сувениров по регламенту'");
	НоваяКоманда.Идентификатор = "ВыгрузкаСувенировРегламент";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Истина;

	//Регламент выгрузка картинок
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = НСтр("ru = 'Запуск выгрузки картинок по регламенту'");
	НоваяКоманда.Идентификатор = "ВыгрузкаКартинокРегламент";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Истина;
	
	Возврат ПараметрыРегистрации;	
	
КонецФункции

// Интерфейс для запуска логики обработки.
Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения) Экспорт
	
	// Диспетчеризация обработчиков команд.
	Если ИмяКоманды = "ВыгрузкаКнигРегламент" Тогда
		Результат = Выгрузить();
		ТекстСообщения = "";
		Если Результат.Успешно Тогда
			Если Результат.Свойство("Данные") Тогда
				// если была выгрузка, сообщаем количество
				УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
				ТекстСообщения = СтрШаблон("Успешно выгружены на сайт данные о номенклатуре. Выгружено позиций: %1",Результат.Данные.ВыгруженоОбъектов);		
			КонецЕсли; 
		Иначе		
			УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
			ТекстСообщения = СтрШаблон("Ошибка выгрузки на сайт данных о номенклатуре: %1",Результат.ОписаниеОшибки);			
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			ЗаписьЖурналаРегистрации("Выгрузка номенклатуры на сайт",УровеньЖурнала,,,ТекстСообщения);		
		КонецЕсли; 
	ИначеЕсли ИмяКоманды = "ВыгрузкаСувенировРегламент" Тогда 	
		Результат = ВыгрузитьСувениры();
		ТекстСообщения = "";
		Если Результат.Успешно Тогда
			Если Результат.Свойство("Данные") Тогда
				// если была выгрузка, сообщаем количество
				УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
				ТекстСообщения = СтрШаблон("Успешно выгружены на сайт данные о сувенирной продукции. Выгружено позиций: %1",Результат.Данные.ВыгруженоОбъектов);		
			КонецЕсли; 
		Иначе		
			УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
			ТекстСообщения = СтрШаблон("Ошибка выгрузки на сайт данных о сувенирной продукции: %1",Результат.ОписаниеОшибки);			
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			ЗаписьЖурналаРегистрации("Выгрузка сувенирной продукции на сайт",УровеньЖурнала,,,ТекстСообщения);		
		КонецЕсли;
	ИначеЕсли ИмяКоманды = "ВыгрузкаКартинокРегламен" Тогда 	
		Результат = ВыгрузитьКартинки(Неопределено, Неопределено, Неопределено);
		ТекстСообщения = "";
		Если Результат.Успешно Тогда
			Если Результат.Свойство("Данные") Тогда
				// если была выгрузка, сообщаем количество
				УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
				ТекстСообщения = СтрШаблон("Успешно выгружены на сайт картинки. Выгружено позиций: %1",Результат.Данные.ВыгруженоОбъектов);		
			КонецЕсли; 
		Иначе		
			УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
			ТекстСообщения = СтрШаблон("Ошибка выгрузки на сайт картинок: %1",Результат.ОписаниеОшибки);			
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			ЗаписьЖурналаРегистрации("Выгрузка картинок на сайт",УровеньЖурнала,,,ТекстСообщения);		
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры